#!/usr/bin/python3

import subprocess
import sys
from googletrans import Translator
from colorama import Fore, Style
import subprocess

#verifica plataforma android
platform = subprocess.run("uname -o", stdout=subprocess.PIPE, shell=True)

if not "android" in str(platform.stdout.lower()):
    import PyPDF2
    from fpdf import FPDF

translator = Translator()

banner = """
  ____    __  ____    ____   _    __    
 |    \  /  ||    \  |    \ | | _|  |_  por: Carlos Alberto
 |     \/   ||     \ |     \| ||_    _| 
 |__/\__/|__||__|\__\|__/\____|  |__|   
========== O Tradutor do Linux ==========
"""

msg_help = f"""{Fore.YELLOW}
-- MODO DE USO --

OPCOES:
    -m, --man:     mostra o manual da ferramenta escolhida.
    -h, --help:    mostra a ajuda/help da ferramenta escolhida.
    -H:            mostra o help do MANT, esse que voce esta vendo.
    -t, --text:    traduz texto dentro de aspas "".
    -a, --arquive: traduz arquivo de texto.
    -p, --pdf:     traduz pdf

COMO CORRER:
    mant <SCRIPT> <OPCAO>

EXEMPLOS:
    mant nmap -h
    mant git -m
    mant "hello my friend" -t
    mant arquivo.txt -a
    mant arquivo.pdf -p
    {Fore.RESET}"""

class manpt():
    def __init__(self, cmd=""):
        self.cmd = cmd

    def trad(self, result=""):
        traduction = translator.translate(result, src="auto", dest="pt")
        #print(traduction.text)
        return traduction.text

    def man(self):
        command = subprocess.run(self.cmd, stdout=subprocess.PIPE, shell=True)
        result = command.stdout.decode()
        tam = len(result)
        if tam < 5000:
            result_trad = manpt().trad(result)
            print(result_trad)
        else:
            cont = 0
            for lines in range(3000, tam, 3000):
                result_trad = manpt().trad(result[cont:lines])
                print(result_trad)
                cont = cont + 3000

    def arq(self, result=""):
        try:
            file = open(result, "r", errors="ignore")
            text = file.read()
            new_file = open(f"traduzido_{result}", "w")
            print(f"{Fore.YELLOW}Traduzindo o seu arquivo de texto...{Fore.RESET}")
            tam = len(text)
            if tam < 5000:
                result_trad = manpt().trad(text)
                new_file.write(f"{result_trad}\n")
            else:
                cont = 0
                for lines in range(3000, tam, 3000):
                    result_trad = manpt().trad(text[cont:lines])
                    new_file.write(f"{result_trad}\n")
                    cont = cont + 3000
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}SAINDO...{Fore.RESET}\n")
        except Exception as err:
            file.close()
            new_file.close()
            print(err)
        else:
            file.close()
            new_file.close()
            print(f"{Fore.YELLOW}Arquivo de texto traduzido e salvo como: {Style.BRIGHT}traduzido_{result}{Style.RESET_ALL}")

    def pdf(self, result=""):
        try:
            file = open(result, "rb")

            pdf = PyPDF2.PdfReader(file)
            cont_page = len(pdf.pages)
            new_pdf = FPDF()
            new_pdf.add_page()
            new_pdf.add_font("Space Mono", "", "SpaceMono-Regular.ttf", uni=True)
            new_pdf.set_font("Space Mono", "", size=10)
            new_pdf.ln(0)
            pages = int(cont_page)
            print(f"{Fore.YELLOW}Traduzindo o seu PDF...{Fore.RESET}")
            for page in range(0, pages):
                pagina = pdf.pages[page]
                texto_pagina = manpt().trad(pagina.extract_text())#.split()
                new_pdf.add_page()
                new_pdf.multi_cell(190, 10, txt=texto_pagina)
            new_pdf.output(f"trad_{result}")
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}SAINDO...{Fore.RESET}\n")
        except Exception as err:
            file.close()
            print(err) 
        else:
            file.close()
            print(f"{Fore.YELLOW}PDF traduzido e salvo como: {Style.BRIGHT}trad_{result}{Style.RESET_ALL}")

print(f"{Fore.YELLOW}{banner}{Fore.RESET}")

if len(sys.argv) < 2:
    print(msg_help)
    quit()
if len(sys.argv) >= 2:
    script = sys.argv[1]
    if script == "-H":
        print(msg_help)
        quit()

if len(sys.argv) >= 3:
    opc = sys.argv[2]

    if opc == "-h" or opc == "--help":
        cmd = f"{script} --help"
        msgf = f"AJUDA DE {script.upper()}"
    elif opc == "-m" or opc == "--man":
        cmd = f"man {script}"
        msgf = f"MANUAL DE {script.upper()}"
    elif opc == "-t" or opc == "--text":
        result_trad = manpt().trad(script)
        print(result_trad)
        msgf = "TRADUÇAO DE TEXTO"
        print(f"\n{Fore.YELLOW}{msgf:=^57}{Fore.RESET}\n")
        quit()
    elif opc == "-a" or opc == "--arquive":
        manpt().arq(script)
        msgf = "TRADUÇAO DE ARQUIVO"
        print(f"\n{Fore.YELLOW}{msgf:=^57}{Fore.RESET}\n")
        quit()
    elif opc == "-p" or opc == "--pdf":
        if "android" in str(platform.stdout.lower()):
            print(f"\n{Fore.RED}Essa função não funciona em android{Fore.RESET}\n")
            exit()
        manpt().pdf(script)
        msgf = "TRADUÇAO DE PDF"
        print(f"\n{Fore.YELLOW}{msgf:=^57}{Fore.RESET}\n")
        quit()
    else:
        print(f"\n{Fore.RED}ERRO, passe um parametro valido.{Fore.RESET}\n")
        quit()

try:
    manpt(cmd).man()

    print(f"\n{Fore.YELLOW}{msgf:=^57}{Fore.RESET}\n")
except KeyboardInterrupt:
    print(f"\n{Fore.YELLOW}SAINDO...{Fore.RESET}\n")
except:
    print(f"\n{Fore.RED}ERRO DESCONHECIDO, verifique sua internet e verifique se os parametros passados sao validos.{Fore.RESET}\n")
else:
    quit()
