#!/usr/bin/python3

import subprocess
import sys
from googletrans import Translator
from colorama import Fore, Style

translator = Translator()

banner = """
  ____    __  ____    ____   _    __    
 |    \  /  ||    \  |    \ | | _|  |_  por: Carlos Silva
 |     \/   ||     \ |     \| ||_    _| 
 |__/\__/|__||__|\__\|__/\____|  |__|   
========== O Tradutor do Linux ==========
"""

msg_help = f"""{Fore.YELLOW}
-- MODO DE USO --

OPCOES:
    -m, --man:     mostra o manual da ferramenta escolhida.
    -h, --help:    mostra a ajuda/help da ferramenta escolhida.
    -H:            mostra o help do MANT, esse que voce esta vendo.
    -t, --text:    traduz texto dentro de aspas "".
    -a, --arquive: traduz arquivo de texto.
    -p, --pdf:     traduz pdf

COMO CORRER:
    mant <SCRIPT> <OPCAO>

EXEMPLOS:
    mant nmap -h
    mant git -m
    mant "hello my friend" -t
    mant arquivo.txt -a
    mant arquivo.pdf -p
    {Fore.RESET}"""

class manpt():
    def __init__(self, cmd=""):
        self.cmd = cmd

    def trad(self, result=""):
        traduction = translator.translate(result, src="auto", dest="pt")
        #print(traduction.text)
        return traduction.text

    def man(self):
        command = subprocess.run(self.cmd, stdout=subprocess.PIPE, shell=True)
        result = command.stdout.decode()
        if len(result) < 5000:
            result_trad = manpt().trad(result)
            print(result_trad)
        else:
            result = result.split("\n")
            for line in result:
                result_trad = manpt().trad(line)
                print(result_trad)

    def arq(self, result=""):
        try:
            file = open(result, "r").read()
            new_file = open(f"trad_{result}", "w")
            print(f"{Fore.YELLOW}Traduzindo o seu arquivo de texto...{Fore.RESET}")
            if len(file) < 5000:
                result_trad = manpt().trad(file)
                new_file.write(f"{result_trad}\n")
            else:
                file = file.split("\n")
                for line in file:
                    result_trad = manpt().trad(line)
                    new_file.write(f"{result_trad}\n")
        except Exception as err:
            print(err)
        else:
            print(f"{Fore.YELLOW}Arquivo de texto traduzido e salvo como: {Style.BRIGHT}trad_{result}{Style.RESET_ALL}")

    def pdf(self, result=""):
        pass

print(f"{Fore.YELLOW}{banner}{Fore.RESET}")

if len(sys.argv) < 2:
    print(msg_help)
    quit()
if len(sys.argv) >= 2:
    script = sys.argv[1]
    if script == "-H":
        print(msg_help)
        quit()

if len(sys.argv) >= 3:
    opc = sys.argv[2]

    if opc == "-h" or opc == "--help":
        cmd = f"{script} --help"
        msgf = f"AJUDA DE {script.upper()}"
    elif opc == "-m" or opc == "--man":
        cmd = f"man {script}"
        msgf = f"MANUAL DE {script.upper()}"
    elif opc == "-t" or opc == "--text":
        manpt().trad(script)
        msgf = "TRADUÇAO DE TEXTO"
        print(f"\n{Fore.YELLOW}{msgf:=^57}{Fore.RESET}\n")
        quit()
    elif opc == "-a" or opc == "--arquive":
        manpt().arq(script)
        msgf = "TRADUÇAO DE ARQUIVO"
        print(f"\n{Fore.YELLOW}{msgf:=^57}{Fore.RESET}\n")
        quit()
    elif opc == "-p" or opc == "--pdf":
        manpt().pdf(script)
        msgf = "TRADUÇAO DE PDF"
        print(f"\n{Fore.YELLOW}{msgf:=^57}{Fore.RESET}\n")
        quit()
    else:
        print(f"\n{Fore.RED}ERRO, passe um parametro valido.{Fore.RESET}\n")
        quit()

try:
    manpt(cmd).man()

    print(f"\n{Fore.YELLOW}{msgf:=^57}{Fore.RESET}\n")
except KeyboardInterrupt:
    print(f"\n{Fore.YELLOW}SAINDO...{Fore.RESET}\n")
except:
    print(f"\n{Fore.RED}ERRO DESCONHECIDO, verifique sua internet e verifique se os parametros passados sao validos.{Fore.RESET}\n")
else:
    quit()
